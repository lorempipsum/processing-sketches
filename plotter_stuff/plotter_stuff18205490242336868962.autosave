import processing.serial.*;

Serial myPort;    // Create object from Serial class
Plotter plotter;  // Create a plotter object
int val;          // Data received from the serial port
int lf = 10;      // ASCII linefeed

//Label
String dateTime = day() + " / " + month() + " / " + year() + " " + hour() + " : " + minute() + " : " + second() + " - ";
String label = dateTime + "Happy Pearls";


//Enable plotting?
boolean PLOTTING_ENABLED = false;
boolean draw_box = false;
boolean draw_label = true;
boolean up = true;
boolean just_draw = false;
boolean dontMoveCursor = false;

//Plotter dimensions
float xMin = 600;
float yMin = 800;
float xMax = 10300 - 300;
float yMax = 8400 - 600;
float plotAreaWidth = (float)(yMax - yMin);
float plotAreaHeight = (float)(xMax - xMin);
float aspectRatio = (float)(plotAreaHeight / plotAreaWidth);

float VERTICAL_CENTER = (xMax + xMin) / 2;
float HORIZONTAL_CENTER = (yMax + yMin) / 2;

float A4_MAX_HEIGHT = 10887;
float A4_MAX_WIDTH = 8467;
float xPen = xMin;
float yPen = yMin;

float TIME_Y = 5000;
float TIME_X = 5000;

float COLUMN_GAP = 1;
float ROW_GAP = 1;
float OBJECT_HEIGHT = 100;
int fps = 60;



//Let's set this up
void setup() {
  size(840, 1080);
  println(dateTime);
  cp5 = new ControlP5(this);
  smooth();

  if (just_draw) {
    draw_box = false;
    draw_label = false;
    PLOTTING_ENABLED = true;
  }

  //Initialize plotter
  if (PLOTTING_ENABLED == true) {

    //Select a serial port
    println(Serial.list()); //Print all serial ports to the console
    String portName = Serial.list()[1]; //make sure you pick the right one
    println("Plotting to port : " + portName);

    //Open the port
    myPort = new Serial(this, portName, 9600);
    myPort.bufferUntil(lf);

    //Associate with a plotter object
    plotter = new Plotter(myPort);

    plotter.write("IN;"); // add Select Pen (SP1) command here when the pen change mechanism is fixed
    plotter.write("VS" + 38 + ";"); // set the speed of the pen. Default is 20, max is 38.1.
  }

  //Draw a label first (this is pretty cool to watch)
  if (draw_label) {
    float labelX = xMax + 300;
    float labelY = yMin;

    if (PLOTTING_ENABLED) {
      plotter.write("PU" + labelX + "," + labelY + ";"); //Position pen
      plotter.write("SI0.14,0.14;DI0,1;LB" + label + char(3)); //Draw label

      //Wait 0.5 second per character while printing label
      println("drawing label");
      delay(label.length() * 500);
      println("label done");
      plotter.write("PU" + labelX + "," + labelY + ";"); //Position pen
    }

    fill(50);
    float textY = map(labelY, 0, A4_MAX_WIDTH, 0, width);
    float textX = map(labelX, 0, A4_MAX_HEIGHT, 0, height);
    text(label, textY, textX);

  }

  if (draw_box) {

    //box
    drawLine(xMin, yMin, xMax, yMin, true);
    drawLine(xMax, yMin, xMax, yMax, true);
    drawLine(xMax, yMax, xMin, yMax, true);
    drawLine(xMin, yMax, xMin, yMin, true);
    drawLine(xMin, yMin, xMax, yMax, true);
    drawLine(xMin, yMax, xMax, yMin, true);

    if (PLOTTING_ENABLED) {

      //vertical line down from middle
      line_clipped(xMin,(yMax + yMin) / 2, xMax,(yMax + yMin) / 2);

      //horizontal line
      line_clipped((xMax + xMin) / 2, yMin,(xMax + xMin) / 2, yMax);
    }}


}

int xCounter = 0;
int yCounter = 0;
float x;
float y;
void draw() {
    strokeWeight(2); 
    stroke(0);
    noFill();
    // Draw circle in the middle of the plotter 
    float x0 = xMin;
    float y0 = yMin;
    
    float R = 600;
    float dR = R/6;
    float gridStep = 0.9*R; 
    y0 = y0 + gridStep*yCounter; 
    if (y0 > yMax) {
      yCounter = 0; 
      y0 = yMin;  //<>// //<>// //<>//
      xCounter = xCounter +1; //<>//
      x = x0 + xCounter*gridStep; //<>// //<>// //<>//
    } //<>//
    if (x0 > xMax) {  //<>// //<>// //<>//
      xCounter = 0;
      println(x0);
      println("resetting x0");
      x0 = xMin;
    }

    yCounter = yCounter + 1;
    y = y0;
    float angle = map(x, xMin, xMax, 0 , 0.1*frameCount);



    if (x < xMax && x > xMin && y < yMax && y > yMin) {
      //plotter_circle(x, y, 1000);
      drawSpider(x,y , angle, dR);
  
    }

    // get value for screen cleaner from cp5 slider "screenCleaner"
    boolean isClearingScreenEachFrame = false;
    if (isClearingScreenEachFrame == true) {
      background(200);
    }
  
}


void drawSpiders(float x0, float y0) {
    float R = 600;
  float dR = R/6;
  float gridStep = 0.9*R; 
  y0 = y0 + gridStep*yCounter; 
  if (y0 > yMax) {
    yCounter = 0; 
    y0 = yMin;  //<>// //<>// //<>//
    xCounter = xCounter +1; //<>//
    x = x0 + xCounter*gridStep; //<>// //<>// //<>//
  } //<>//
  if (x0 > xMax) {  //<>// //<>// //<>//
    xCounter = 0;
    println(x0);
    println("resetting x0");
    x0 = xMin;
  }

  yCounter = yCounter + 1;
  y = y0;

  // return -1 or 1 
  int sign = 1;
  if (noise(y) > 0.5) {
    sign = -1;
  }
  float yBump = sign*noise(x,y)*R/(3*PI);
  
  sign = 1;
  if (noise(x) > 0.5) {
    sign = -1;
  }
  float xBump = sign*noise(y,x)*R/PI/4;
  if (x < xMax && x > xMin && y < yMax && y > yMin) {
  //plotter_circle(x, y, 1000);
  float angle = map(x, xMin, xMax, 0 , 100*PI);

  drawSpider(x+xBump,y + yBump, angle, dR);

  }
}

float[] drawBlob(float x, float y, float angle, float size) {
  // repeat N times
  strokeWeight(2);
  stroke(0);
  noFill();

  float maxX = 0;
  float maxY = 0;
  float rX = 0;
  float rY = 0;
  float stepSize = size/10;

  while (rX < size && rY < size) {
    rX = maxX + stepSize;
    rY = maxY + random(0, stepSize);
    plotter_ellipse(x, y, rX, rY, angle);

    maxX = rX;
    maxY = rY;
  }

  float[] dimensions = {maxX, maxY};
  
  return dimensions;

}


void drawSpider (float x, float y, float angle, float size ) {
  // Draw a blob for the body 
  drawBlob(x, y, angle, size);
}
